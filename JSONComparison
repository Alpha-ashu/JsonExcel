package JSON;



import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.HashMap;
import java.util.Map;

import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

public class JSONComparison {

    public static void main(String[] args) {
        String mappingFilePath = "C:\\Users\\Alpha\\IdeaProjects\\Canocial\\src\\main\\java\\Data\\mapping.xlsx"; // Path to your mapping file
        String oldJsonPath = "C:\\Users\\Alpha\\IdeaProjects\\Canocial\\src\\main\\java\\Data\\response1.json";   // Path to response1
        String newJsonPath = "C:\\Users\\Alpha\\IdeaProjects\\Canocial\\src\\main\\java\\Data\\response2.json";   // Path to response2
        String outputExcelPath = "comparison_output.xlsx";  // Excel output
        String outputJsonPath = "comparison_summary.json";  // JSON output

        try {
            // Initialize ObjectMapper and Workbook
            ObjectMapper objectMapper = new ObjectMapper();
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Comparison Results");

            // Create Header Row
            Row headerRow = sheet.createRow(0);
            headerRow.createCell(0).setCellValue("Old Path");
            headerRow.createCell(1).setCellValue("New Path");
            headerRow.createCell(2).setCellValue("Old Value");
            headerRow.createCell(3).setCellValue("New Value");
            headerRow.createCell(4).setCellValue("Matched/Not Matched");

            // Load Mapping, Old JSON, and New JSON
            Map<String, String> mapping = readMapping(mappingFilePath);
            JsonNode oldJson = objectMapper.readTree(new File(oldJsonPath));
            JsonNode newJson = objectMapper.readTree(new File(newJsonPath));

            // Initialize the JSON output node
            ObjectNode resultJson = objectMapper.createObjectNode();

            int rowIndex = 1; // Start after the header row
            for (Map.Entry<String, String> entry : mapping.entrySet()) {
                String oldPath = entry.getKey();
                String newPath = entry.getValue();

                // Extract values from both JSONs
                String oldValue = extractValue(oldJson, oldPath);
                String newValue = extractValue(newJson, newPath);

                // Determine match status
                String matchStatus = (oldValue != null && oldValue.equals(newValue)) ? "Matched" : "Not Matched";

                // Write to Excel
                Row row = sheet.createRow(rowIndex++);
                row.createCell(0).setCellValue(oldPath);
                row.createCell(1).setCellValue(newPath);
                row.createCell(2).setCellValue(oldValue != null ? oldValue : "null");
                row.createCell(3).setCellValue(newValue != null ? newValue : "null");
                row.createCell(4).setCellValue(matchStatus);

                // Write to JSON output
                updateJsonResult(resultJson, newPath, newValue, matchStatus);
            }

            // Write Excel Output
            try (FileOutputStream fos = new FileOutputStream(outputExcelPath)) {
                workbook.write(fos);
            }

            // Write JSON Output
            objectMapper.writerWithDefaultPrettyPrinter().writeValue(new File(outputJsonPath), resultJson);

            System.out.println("Comparison complete. Results written to:");
            System.out.println("Excel: " + outputExcelPath);
            System.out.println("JSON: " + outputJsonPath);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static Map<String, String> readMapping(String filePath) throws Exception {
        Map<String, String> mapping = new HashMap<>();
        try (FileInputStream fis = new FileInputStream(new File(filePath));
             Workbook workbook = new XSSFWorkbook(fis)) {
            Sheet sheet = workbook.getSheetAt(0);
            for (Row row : sheet) {
                if (row.getRowNum() == 0) continue; // Skip header row
                String oldPath = row.getCell(0).getStringCellValue();
                String newPath = row.getCell(1).getStringCellValue();
                mapping.put(oldPath, newPath);
            }
        }
        return mapping;
    }

    private static String extractValue(JsonNode jsonNode, String path) {
        String[] keys = path.split("/");
        JsonNode current = jsonNode;
        for (String key : keys) {
            if (key.isEmpty()) continue; // Skip empty keys
            if (key.contains("[") && key.contains("]")) {
                // Handle array indices
                String arrayKey = key.substring(0, key.indexOf("["));
                int index = Integer.parseInt(key.substring(key.indexOf("[") + 1, key.indexOf("]")));
                current = current.path(arrayKey).path(index);
            } else {
                current = current.path(key);
            }
            if (current.isMissingNode()) return null; // Path not found
        }
        return current.asText(null); // Return value as text
    }

    private static void updateJsonResult(ObjectNode resultJson, String newPath, String newValue, String matchStatus) {
        ObjectNode currentNode = resultJson;
        String[] keys = newPath.split("/");
        for (int i = 0; i < keys.length - 1; i++) {
            if (keys[i].isEmpty()) continue;
            currentNode = currentNode.with(keys[i]);
        }
        String lastKey = keys[keys.length - 1];
        currentNode.put(lastKey, matchStatus.equals("Matched") ? newValue : "Value not matched");
    }
}
