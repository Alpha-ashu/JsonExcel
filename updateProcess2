package JSON;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.*;
import java.util.*;

public class Process2_CompareLegacyAndPayerPackage {

    private static final Logger logger = LoggerFactory.getLogger(Process2_CompareLegacyAndPayerPackage.class);
    private static final String EXTRACTED_FOLDER = "target/JSON_response/ExtractedRecords/";
    private static final String MAPPING_FILE = "Data/mapping.xlsx";
    private static final String OUTPUT_EXCEL = "Data/output.xlsx";
    private static final String OUTPUT_JSON = "Data/output_matched.json";

    public static void main(String[] args) {
        try (Workbook workbook = new XSSFWorkbook()) {
            Sheet sheet = workbook.createSheet("Comparison Results");
            createHeader(sheet);
            Map<String, String> mapping = readMapping(MAPPING_FILE);
            ObjectMapper objectMapper = new ObjectMapper();
            ObjectNode aggregatedJsonResults = objectMapper.createObjectNode();

            Arrays.stream(new File(EXTRACTED_FOLDER).listFiles(File::isDirectory))
                  .parallel()
                  .forEach(folder -> processFolder(folder, mapping, sheet, aggregatedJsonResults));

            objectMapper.writerWithDefaultPrettyPrinter().writeValue(new File(OUTPUT_JSON), aggregatedJsonResults);
            try (FileOutputStream fos = new FileOutputStream(OUTPUT_EXCEL)) {
                workbook.write(fos);
            }

            logger.info("Comparison complete. Output saved to {} and {}", OUTPUT_EXCEL, OUTPUT_JSON);
        } catch (Exception e) {
            logger.error("Error during processing", e);
        }
    }

    private static void createHeader(Sheet sheet) {
        Row headerRow = sheet.createRow(0);
        String[] headers = {"Folder Name", "Old Path", "New Path", "Old Value", "New Value", "Matched/Not Matched"};
        for (int i = 0; i < headers.length; i++) {
            headerRow.createCell(i).setCellValue(headers[i]);
        }
    }
}
